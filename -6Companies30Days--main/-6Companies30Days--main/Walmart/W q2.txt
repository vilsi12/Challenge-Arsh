class Solution {
public:
    
    int fun(int i,int j,vector<int>piles,vector<vector<int>>&dp){
        if(i>j){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        
        int a=piles[i]+min(fun(i+2,j,piles,dp),fun(i+1,j-1,piles,dp));
        int b=piles[j]+min(fun(i+1,j-1,piles,dp),fun(i,j-2,piles,dp));
        
        int ans=max(a,b);
        return dp[i][j]=ans;
    }
    
    
    bool stoneGame(vector<int>& piles) {
        int n=piles.size();
        int s=0;
        for(int i=0;i<n;i++){
            s+=piles[i];
        }
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        // int dp[501][501];
        // memset(dp,-1,sizeof(dp));
        int alice=fun(0,n-1,piles,dp);
        int bob=s-alice;
        
        return alice>bob;
    }
};
