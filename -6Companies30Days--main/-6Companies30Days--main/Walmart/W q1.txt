class Solution {
public:
    
    void dfs(int i,vector<int>&vis,vector<pair<int,double>>adj[]){
        vis[i]=1;
        for(auto it:adj[i]){
            int x=it.first;
            if(vis[x]==0){
                dfs(x,vis,adj);
            }
        }
    }
    
    
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<pair<int,double>>adj[n];
        for(int i=0;i<edges.size();i++){
            int u=edges[i][0];
            int v=edges[i][1];
            double w=succProb[i];
            adj[u].push_back({v,w});
            adj[v].push_back({u,w});
        }
        
        //If start is not connected to end then return 0 
        vector<int>vis(n,0);
        dfs(start,vis,adj);
        if(vis[end]==0){
            return 0;
        }
    
        double k[n];
        for(int i=0;i<n;i++){
            k[i]=0.0;
        }
        
        priority_queue<pair<double,int>>pq;
        pq.push({1.0,start});
        k[start]=1.0;
        
        while(!pq.empty()){
            int u=pq.top().second;
            pq.pop();
            for(auto it:adj[u]){
                int v=it.first;
                double w=it.second;
                
                if(k[u]*w>k[v]){
                    k[v]=k[u]*w;
                    pq.push({k[v],v});
                }
            }
        }
        
        return k[end];
    }
};
