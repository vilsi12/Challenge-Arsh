class Solution{

public:

   void printParenthesis(int i, int j, int n,int *bracket, char &name,string &s){

   if (i == j)
   {
       s.push_back(name++);
       return;
   }

   s.push_back('(');


   printParenthesis(i, *((bracket+j*n)+i), n,bracket, name,s);

   printParenthesis(*((bracket+j*n)+i) + 1, j,n, bracket, name,s);

   s.push_back(')');
}

   string matrixChainOrder(int p[], int n){

       int m[n][n];


   for (int i=1; i<n; i++)

       m[i][i] = 0;

   for (int L=2; L<n; L++)
   {
       for (int i=1; i<n-L+1; i++)

       {
           int j = i+L-1;
           m[i][j] = INT_MAX;

           for (int k=i; k<=j-1; k++)
           {
               // q = cost/scalar multiplications

               int q = m[i][k] + m[k+1][j] + p[i-1]*p[k]*p[j];
               if (q < m[i][j])
               {

                   m[i][j] = q;        

                   m[j][i] = k;
               }
           }
       }
   }

   // The first matrix is printed as 'A', next as 'B',
   // and so on
   char name = 'A';

   string s="";
   printParenthesis(1, n-1, n, (int *)m, name,s);
   return s;
   }
};

