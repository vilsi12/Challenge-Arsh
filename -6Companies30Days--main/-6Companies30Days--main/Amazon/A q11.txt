class Solution
{
    public:
    
    void preorder(Node* root,vector<int>&ans){
        if(!root){
            ans.push_back(int(NULL));
            return;
        }
        ans.push_back(root->data);
        preorder(root->left,ans);
        preorder(root->right,ans);
        return;
    }
    
    
    //Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) 
    {
        //Your code here
        vector<int>ans;
        preorder(root,ans);
        return ans;
    }
    
    //Function to deserialize a list and construct the tree.
    int i=0;
    Node * deSerialize(vector<int> &A)
    {
       //Your code here
       if((A.size()-1)<i || A[i]==NULL){
           i++;
           return NULL;
       }
       Node* root = new Node(A[i++]);
       root->left=deSerialize(A);
       root->right=deSerialize(A);
       return root;
    }

};
